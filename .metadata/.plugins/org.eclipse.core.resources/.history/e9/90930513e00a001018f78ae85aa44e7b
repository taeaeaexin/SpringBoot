package proxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;

public class CheckNotNullInvocationHandler implements InvocationHandler {
	private Object target;
	
	public CheckNotNullInvocationHandler(Object target) {
		this.target = target;
	}
	
	//proxy를 통해서 MyIF에 있는 메소드를 호출할 때마다, invoke(가) 대신 호출된다
	@Override
	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		//proxy가 할 일이 있으면 하고나서 필요에 따라 실제 메소드를 호출하고
		//특별한 할 일이 없으면 그냥 bypass
		return null;
	}

}

private Object handleCheckNotNull(Method method, Object[] args ) throws Throwable{
    
    CheckNotNull annotation = method.getAnnotation(CheckNotNull.class);
    String[] parameterNames = annotation.parameterNames();
    
    for (int i = 0; i < args.length; i++) {
        if( args[i] == null ) {
            throw new IllegalArgumentException("Parameter " + parameterNames[i] + " is null (should be notnull)");
        }
    }
    
    return method.invoke(target, args);
}