package com.mycom.myapp.controller;

import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.mycom.myapp.dto.CarDto;

import jakarta.servlet.http.HttpServletRequest;

//client -> server로 전송하는 parameter 처리
//servlet, jsp <= request.getParameter("name")
//Spring은 넘어오는 파라미터를 최대한 대응하는 메도드의 파라미터에 자동화 시도
@Controller
public class ParamController {
	@GetMapping("/param1")
	public void m1(HttpServletRequest request) {
		System.out.println(request.getParameter("bookId"));
		System.out.println(request.getParameter("bookName"));
	}
	
	@GetMapping("/param2")
	public void m2(String bookId) { // String bookId
		System.out.println(bookId);
	}
	
	@GetMapping("/param3")
	public void m3(int bookId, String bookName) { // String bookId
		System.out.println(bookId);
		System.out.println(bookName);
	}
	
	// 1. 이름으로 matching 되지 않으면 null 처리
	// 2. 메소드의 파라미터 타입이 primitive type 이면 int <-- null 불가
	@GetMapping("/param4")
	public void m4(int book) { // IlligalStateException
		System.out.println(book);
	}
	
	@GetMapping("/param5")
	public void m5(Integer book) { // null
		System.out.println(book);
	}
	
	@GetMapping("/param6")
	public void m6(int bookId) { // 123
		System.out.println(bookId);
	}
	
	@GetMapping("/param7")
	public void m7(String bookname) { // null
		System.out.println(bookname);
	}
	
	// @RequestParam
	// required 속성 (true가 default)
	@GetMapping("/param8")
	public void m8(@RequestParam String seq) { // 123, warn (bad request 400)
		System.out.println(seq);
	}
	
	@GetMapping("/param9")
	public void m9(@RequestParam(required=false) String seq) { // 123, null
		System.out.println(seq);
	}
	
	@GetMapping("/param10")
	public void m10(@RequestParam(name="seq2") String seq) { // 123, null
		System.out.println(seq);
	}
	
	// parameter를 dto로
	// int price가 잘못되는 경우 : IlligalStateException 대신 0 default 값으로 설정
	// 기본생성자 X : O <= 다른 생성자를 이용
	// 기본생성자 X, 다른 생성자 X : O <= 컴파일러가 제공하는 기본 생성자 + setter 이용
	// 기본생성자 X, 다른 생성자 X, setter X : X <= 필드값 파라미터로 초기화 X
	// 기본생성자 X, 다른 생성자 O, setter X : X <= 다른 생성자로 초기화 X
	// price -> price2, setter, getter는 그대로 : 
	@GetMapping("/car")
	public void m11(CarDto carDto) {
		System.out.println(carDto);
	}
	
	//복수개의 parameter를 처리해야하는데, 몇개가 될지, dto가 존재X
	// @RequestParam Map
	@GetMapping("/map")
	public void m12(@RequestParam Map<String, String> params) {
		System.out.println(params.get("name"));
		System.out.println(params.get("price"));
		System.out.println(params.get("price2"));
		System.out.println(params.get("owner2"));
	}
	
	//Header
	@GetMapping("/map")
	public void m13(@RequestHeader("User-Agent") String userAgent) {
		System.out.println(params.get("userAgent"));
	}
}
